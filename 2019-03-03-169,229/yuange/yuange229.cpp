/***
 *_______________#########_______________________
 *______________############_____________________
 *______________#############____________________
 *_____________##_############___________________
 *____________###__######_#####__________________
 *____________###_########__####_________________
 *___________###__##########_####________________
 *__________####__###########_####_______________
 *________#####___###########__#####_____________
 *_______######___###_########___#####___________
 *_______#####___###___########___######_________
 *______######___###__###########___######_______
 *_____######___####_##############__######______
 *____#######__#####################_#######_____
 *____#######__##############################____
 *___#######__######_#################_#######___
 *___#######__######_######_#########___######___
 *___#######____##__######___######_____######___
 *___#######________######____#####_____#####____
 *____######________#####_____#####_____####_____
 *_____#####________####______#####_____###______
 *______#####______;###________###______#________
 *________##_______####________####______________
 */
// 利用性质：出现次数超过n/3的数字最多只可能有2个，再结合简易版用到的计数器就可以在O(n)内解决
#define INF 0x3f3f3f3f
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        if (nums.empty()) return vector<int>();
        int c1 = 1, c2 = 0;
        int r1 = nums[0], r2 = INF;
        vector<int> ret;
        for (auto i : nums)
        {
            if (i == r1) ++c1;
            else if (i == r2) ++c2;
            else if (c1 == 0) {
                r1 = i; c1 = 1;
            } else if (c2 == 0) {
                r2 = i; c2 = 1;
            } else {
                --c1; --c2;
            }
        }
        c1 = 0; c2 = 0;
        for (auto i : nums)
            if (r1 == i) ++c1;
            else if (r2 == i) ++c2;
        if (c1 > nums.size() / 3) ret.push_back(r1);
        if (c2 > nums.size() / 3) ret.push_back(r2);
        return ret;
    }
};
