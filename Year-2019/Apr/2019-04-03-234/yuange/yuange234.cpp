/***
 *_______________#########_______________________
 *______________############_____________________
 *______________#############____________________
 *_____________##_############___________________
 *____________###__######_#####__________________
 *____________###_########__####_________________
 *___________###__##########_####________________
 *__________####__###########_####_______________
 *________#####___###########__#####_____________
 *_______######___###_########___#####___________
 *_______#####___###___########___######_________
 *______######___###__###########___######_______
 *_____######___####_##############__######______
 *____#######__#####################_#######_____
 *____#######__##############################____
 *___#######__######_#################_#######___
 *___#######__######_######_#########___######___
 *___#######____##__######___######_____######___
 *___#######________######____#####_____#####____
 *____######________#####_____#####_____####_____
 *_____#####________####______#####_____###______
 *______#####______;###________###______#________
 *________##_______####________####______________
 */
/*
 * @Author: yuange
 * @LastEditors: yuange
 * @Description: Coding everyday!
 * @Date: 2019-04-03 15:45:27
 * @LastEditTime: 2019-04-03 15:45:40
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
// 找中点，翻转链表再比较，24ms，98%
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode *l = head, *r = head;
        while (r && r->next) {
            r = r->next->next;
            l = l->next;
        }
        r = reverse(l);
        while (r) {
            if (r->val != head->val) return false;
            r = r->next;
            head = head->next;
        }
        return true;
    }
    
    ListNode* reverse(ListNode* head) {
        if (!head || !head->next) return head;
        ListNode *tail = head->next, *r = reverse(tail);
        tail->next = head;
        head->next = nullptr;
        return r;
    }
};