/***
 *_______________#########_______________________
 *______________############_____________________
 *______________#############____________________
 *_____________##_############___________________
 *____________###__######_#####__________________
 *____________###_########__####_________________
 *___________###__##########_####________________
 *__________####__###########_####_______________
 *________#####___###########__#####_____________
 *_______######___###_########___#####___________
 *_______#####___###___########___######_________
 *______######___###__###########___######_______
 *_____######___####_##############__######______
 *____#######__#####################_#######_____
 *____#######__##############################____
 *___#######__######_#################_#######___
 *___#######__######_######_#########___######___
 *___#######____##__######___######_____######___
 *___#######________######____#####_____#####____
 *____######________#####_____#####_____####_____
 *_____#####________####______#####_____###______
 *______#####______;###________###______#________
 *________##_______####________####______________
 */
/*
 * @Author: yuange
 * @LastEditors: yuange
 * @Description: Coding everyday!
 * @Date: 2019-04-03 11:20:11
 * @LastEditTime: 2019-04-03 11:23:39
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
// 归并排序思路，用了两个递归，链表没有开辟额外空间，所以空间是O(1)，44ms，99%
// 1.找中点
// 2.拆分链表
// 3.合并链表
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if (!head || !head->next) return head;
        ListNode *l = head, *m = head, *r = head;
        while (r && r->next) {
            r = r->next->next;
            m = l;
            l = l->next;
        }
        m->next = nullptr;
        return merge(sortList(head), sortList(l));
    }
    
    ListNode* merge(ListNode* n1, ListNode* n2) {
        if (!n1) return n2;
        if (!n2) return n1;
        if (n1->val <= n2->val) {
            n1->next = merge(n1->next, n2);
            return n1;
        } else {
            n2->next = merge(n2->next, n1);
            return n2;
        }
    }
};