/***
 *_______________#########_______________________
 *______________############_____________________
 *______________#############____________________
 *_____________##_############___________________
 *____________###__######_#####__________________
 *____________###_########__####_________________
 *___________###__##########_####________________
 *__________####__###########_####_______________
 *________#####___###########__#####_____________
 *_______######___###_########___#####___________
 *_______#####___###___########___######_________
 *______######___###__###########___######_______
 *_____######___####_##############__######______
 *____#######__#####################_#######_____
 *____#######__##############################____
 *___#######__######_#################_#######___
 *___#######__######_######_#########___######___
 *___#######____##__######___######_____######___
 *___#######________######____#####_____#####____
 *____######________#####_____#####_____####_____
 *_____#####________####______#####_____###______
 *______#####______;###________###______#________
 *________##_______####________####______________
 */
/*
 * @Author: yuange
 * @LastEditors: yuange
 * @Description: Coding everyday!
 * @Date: 2019-03-25 17:54:05
 * @LastEditTime: 2019-03-25 18:22:18
 */
// 目前最快的方法是二分，40ms，88%
class Solution {
public:
    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int n = matrix.size(), l = matrix[0][0], r = matrix[n - 1][n - 1] + 1;
        int mid = l;
        while (l < r) {
            mid = l + (r - l) / 2; // 如果直接用(l + r)/2会超时
            int c1 = 0, c2 = 0;
            for (auto &vec : matrix) {
                c1 += lower_bound(vec.begin(), vec.end(), mid) - vec.begin();
                c2 += upper_bound(vec.begin(), vec.end(), mid) - vec.begin();
            }
            if (c1 < k && c2 >= k) return mid;
            else if (c1 < k) l = mid + 1;
            else r = mid;
        }
        return mid;
    }
};
