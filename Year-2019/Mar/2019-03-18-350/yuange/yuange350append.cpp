/***
 *_______________#########_______________________
 *______________############_____________________
 *______________#############____________________
 *_____________##_############___________________
 *____________###__######_#####__________________
 *____________###_########__####_________________
 *___________###__##########_####________________
 *__________####__###########_####_______________
 *________#####___###########__#####_____________
 *_______######___###_########___#####___________
 *_______#####___###___########___######_________
 *______######___###__###########___######_______
 *_____######___####_##############__######______
 *____#######__#####################_#######_____
 *____#######__##############################____
 *___#######__######_#################_#######___
 *___#######__######_######_#########___######___
 *___#######____##__######___######_____######___
 *___#######________######____#####_____#####____
 *____######________#####_____#####_____####_____
 *_____#####________####______#####_____###______
 *______#####______;###________###______#________
 *________##_______####________####______________
 */
/*
 * @Author: yuange
 * @LastEditors: yuange
 * @Description: Coding everyday!
 * @Date: 2019-03-18 14:37:47
 * @LastEditTime: 2019-03-18 15:06:25
 */
// 如果一开始就是排好序的数组，可以不用map，排序后再查找也能击败100%
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        return intersect_ordered(nums1, nums2);
    }

    // 对于排序好的两个数组，不需要开辟额外的空间
    vector<int> intersect_ordered(vector<int>& nums1, vector<int>& nums2) {
        vector<int> ret;
        int n1 = nums1.size(), n2 = nums2.size();
        for (int i = 0, j = 0; i < n1 && j < n2;) {
            if (nums1[i] > nums2[j]) ++j;
            else if (nums1[i] < nums2[j]) ++i;
            else {
                ret.push_back(nums1[i++]); ++j;
            }
        }
        return ret;
    }
};