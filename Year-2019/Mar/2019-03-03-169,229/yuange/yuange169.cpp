/***
 *_______________#########_______________________
 *______________############_____________________
 *______________#############____________________
 *_____________##_############___________________
 *____________###__######_#####__________________
 *____________###_########__####_________________
 *___________###__##########_####________________
 *__________####__###########_####_______________
 *________#####___###########__#####_____________
 *_______######___###_########___#####___________
 *_______#####___###___########___######_________
 *______######___###__###########___######_______
 *_____######___####_##############__######______
 *____#######__#####################_#######_____
 *____#######__##############################____
 *___#######__######_#################_#######___
 *___#######__######_######_#########___######___
 *___#######____##__######___######_____######___
 *___#######________######____#####_____#####____
 *____######________#####_____#####_____####_____
 *_____#####________####______#####_____###______
 *______#####______;###________###______#________
 *________##_______####________####______________
 */
// 一左一右遍历，如果两数不同则抵消，否则继续找到下一组不同的数
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();
        int i = 0, j = n - 1;
        for (; i < j; i++, j--)
        {
            if (nums[i] == nums[j]) {
                int r = j;
                while (nums[r] == nums[i] && i < r) r--;
                int t = nums[j]; nums[j] = nums[r]; nums[r] = t; // 交换元素位置
            }
        }
        return nums[i];
    }
};
